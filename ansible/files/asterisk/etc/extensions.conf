; extensions.conf - the Asterisk dial plan
;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your
; inbound and outbound calls in Asterisk.
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI

;
; The "General" category is for certain variables.
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens.
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=no
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess. This is the default.
;
; If autofallthrough is not set, then if an extension runs out of
; things to do, Asterisk will wait for a new extension to be dialed
; (this is the original behavior of Asterisk 1.0 and earlier).
;
autofallthrough=no
;
;
;
; If extenpatternmatchnew is set (true, yes, etc), then a new algorithm that uses
; a Trie to find the best matching pattern is used. In dialplans
; with more than about 20-40 extensions in a single context, this
; new algorithm can provide a noticeable speedup.
; With 50 extensions, the speedup is 1.32x
; with 88 extensions, the speedup is 2.23x
; with 138 extensions, the speedup is 3.44x
; with 238 extensions, the speedup is 5.8x
; with 438 extensions, the speedup is 10.4x
; With 1000 extensions, the speedup is ~25x
; with 10,000 extensions, the speedup is 374x
; Basically, the new algorithm provides a flat response
; time, no matter the number of extensions.
;
; By default, the old pattern matcher is used.
;
; ****This is a new feature! *********************
; The new pattern matcher is for the brave, the bold, and
; the desperate. If you have large dialplans (more than about 50 extensions
; in a context), and/or high call volume, you might consider setting
; this value to "yes" !!
; Please, if you try this out, and are forced to return to the
; old pattern matcher, please report your reasons in a bug report
; on https://issues.asterisk.org. We have made good progress in providing
; something compatible with the old matcher; help us finish the job!
;
; This value can be switched at runtime using the cli command "dialplan set extenpatternmatchnew true"
; or "dialplan set extenpatternmatchnew false", so you can experiment to your hearts content.
;
;extenpatternmatchnew=no
;
; If clearglobalvars is set, global variables will be cleared
; and reparsed on a dialplan reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
; NOTE: A complication sets in, if you put your global variables into
; the AEL file, instead of the extensions.conf file. With clearglobalvars
; set, a "reload" will often leave the globals vars cleared, because it
; is not unusual to have extensions.conf (which will have no globals)
; load after the extensions.ael file (where the global vars are stored).
; So, with "reload" in this particular situation, first the AEL file will
; clear and then set all the global vars, then, later, when the extensions.conf
; file is loaded, the global vars are all cleared, and then not set, because
; they are not stored in the extensions.conf file.
;
clearglobalvars=no
;
; User context is where entries from users.conf are registered.  The
; default value is 'default'
;
;userscontext=default
;
; You can include other config files, use the #include command
; (without the ';'). Note that this is different from the "include" command
; that includes contexts within other contexts. The #include command works
; in all asterisk configuration files.
;#include "filename.conf"
;#include <filename.conf>
;#include filename.conf
;
; You can execute a program or script that produces config files, and they
; will be inserted where you insert the #exec command. The #exec command
; works on all asterisk configuration files.  However, you will need to
; activate them within asterisk.conf with the "execincludes" option.  They
; are otherwise considered a security risk.
;#exec /opt/bin/build-extra-contexts.sh
;#exec /opt/bin/build-extra-contexts.sh --foo="bar"
;#exec </opt/bin/build-extra-contexts.sh --foo="bar">
;#exec "/opt/bin/build-extra-contexts.sh --foo=\"bar\""
;

; The "Globals" category contains global variables that can be referenced
; in the dialplan with the GLOBAL dialplan function:
; ${GLOBAL(VARIABLE)}
; ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
; Unix/Linux environmental variables can be reached with the ENV dialplan
; function: ${ENV(VARIABLE)}
;
[globals]
CONSOLE=Console/dsp				; Console interface for demo

;
; Callcenter Demo
;
[public]
exten => 113,1,goto(callcenter,s,1)
exten => 011,1,goto(agent-login,s,1)
exten => 022,1,goto(agent-logout,s,1)


[callcenter]
exten => s,1,NoOp
  same => n,Answer
  same => n,Set(CHANNEL(language)=en)
  same => n,Set(CHANNEL(hangup_handler_push)=hangup-handler,s,1)
  same => n,UserEvent(CALLER)
  same => n,Queue(q-callcenter,,,,3600)
  same => n,Set(queue-member=${MEMBERINTERFACE})
  same => n,Hangup(16)


[hangup-handler]
exten => s,1,noop
    same => n,UserEvent(CALLERHANGUP)
    same => n,GotoIf($["${queue-member}" = ""]?skip)
    same => n,UnpauseQueueMember(q-callcenter,${queue-member})
    same => n(skip),Return


[agent-login]
exten => s,1,noop
  same => n,Answer
  same => n,Set(CHANNEL(language)=en)
  same => n,wait(1)
  same => n,Set(agentid=${CALLERID(number)})
  same => n,Set(queue-member=local/${agentid}@agent-connect)
  same => n,UserEvent(LOGGEDIN)
  same => n,AddQueueMember(q-callcenter,${queue-member},0,,${agentid})
  same => n,PauseQueueMember(q-callcenter,${queue-member})
  same => n,Playback(agent-loginok)
  same => n,hangup(16)


[agent-logout]
exten => s,1,noop
  same => n,Answer
  same => n,Set(CHANNEL(language)=en)
  same => n,wait(1)
  same => n,Set(agentid=${CALLERID(number)})
  same => n,Set(queue-member=local/${agentid}@agent-connect)
  same => n,UserEvent(LOGGEDOUT)
  same => n,RemoveQueueMember(q-callcenter,${queue-member})
  same => n,Playback(agent-loggedoff)
  same => n,hangup(16)


[agent-connect]
  exten => _X.,1,Noop
    same => n,Set(CHANNEL(accountcode)=CALLCENTER)
    same => n,Set(agentid=${EXTEN})
    same => n,Set(queue-member=local/${agentid}@agent-connect)
    same => n,PauseQueueMember(q-callcenter,${queue-member})
    same => n,Dial(SIP/${agentid},30,r)
